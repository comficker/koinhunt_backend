# Generated by Django 3.2.5 on 2022-02-20 14:14

import apps.project.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('media', '0002_media_meta'),
        ('authentication', '0002_alter_wallet_chain'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('governance', '0002_alter_tokencontract_address'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('verified', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(default=0)),
                ('init_power_target', models.FloatField(default=1000.0)),
                ('score_detail', models.JSONField(blank=True, default=dict, null=True)),
                ('target_object_id', models.CharField(max_length=128)),
                ('field', models.CharField(max_length=128, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('data', models.JSONField()),
                ('nft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contributions', to='governance.nft')),
                ('target_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='contenttypes.contenttype')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='authentication.wallet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Incentive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.CharField(blank=True, max_length=600, null=True)),
                ('reward_total', models.FloatField(default=0)),
                ('reward_remain', models.FloatField(default=0)),
                ('power_target', models.FloatField(default=0)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('contribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incentives', to='project.contribute')),
                ('reward_token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incentives', to='governance.tokencontract')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('verified', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(default=0)),
                ('init_power_target', models.FloatField(default=1000.0)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, max_length=600, null=True)),
                ('id_string', models.CharField(max_length=200)),
                ('homepage', models.CharField(blank=True, max_length=128)),
                ('links', models.JSONField(blank=True, null=True)),
                ('features', models.JSONField(blank=True, null=True)),
                ('score_calculated', models.FloatField(default=0)),
                ('score_detail', models.JSONField(default=apps.project.models.default_score)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('verified', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(default=0)),
                ('init_power_target', models.FloatField(default=1000.0)),
                ('score_detail', models.JSONField(blank=True, default=dict, null=True)),
                ('chain_id', models.CharField(default='bsc_mainnet', max_length=50)),
                ('address', models.CharField(max_length=100)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, max_length=600, null=True)),
                ('symbol', models.CharField(max_length=42)),
                ('decimal', models.CharField(default=18, max_length=3)),
                ('total_supply', models.FloatField(default=0)),
                ('circulating_supply', models.FloatField(default=0)),
                ('init_price', models.FloatField(default=0)),
                ('current_price', models.FloatField(default=0)),
                ('tokenomics', models.JSONField(blank=True, null=True)),
                ('platforms', models.JSONField(blank=True, null=True)),
                ('short_report', models.JSONField(blank=True, null=True)),
                ('external_ids', models.JSONField(blank=True, null=True)),
                ('time_check', models.DateTimeField(default=django.utils.timezone.now)),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tokens', to='media.media')),
                ('nft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tokens', to='governance.nft')),
                ('wallet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tokens', to='authentication.wallet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Validate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('power', models.FloatField(default=0)),
                ('contribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validates', to='project.contribute')),
                ('nft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validates', to='governance.nft')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validates', to='authentication.wallet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TokenPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('time_check', models.DateTimeField(default=django.utils.timezone.now)),
                ('time_open', models.DateTimeField(blank=True, null=True)),
                ('time_close', models.DateTimeField(blank=True, null=True)),
                ('supply', models.FloatField(default=0)),
                ('price_open', models.FloatField(default=0)),
                ('price_close', models.FloatField(default=0)),
                ('price_avg', models.FloatField(default=0)),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_prices', to='project.token')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TokenLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_check', models.DateTimeField(default=django.utils.timezone.now)),
                ('field', models.CharField(max_length=50)),
                ('value', models.JSONField()),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_logs', to='project.token')),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=600, null=True)),
                ('id_string', models.CharField(max_length=200)),
                ('reputation', models.FloatField(default=0)),
                ('taxonomy', models.CharField(default='tag', max_length=10)),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='terms', to='media.media')),
            ],
            options={
                'unique_together': {('id_string', 'taxonomy')},
            },
        ),
        migrations.CreateModel(
            name='ProjectTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_terms', to='project.project')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_terms', to='project.term')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='main_token',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_projects', to='project.token'),
        ),
        migrations.AddField(
            model_name='project',
            name='media',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='media.media'),
        ),
        migrations.AddField(
            model_name='project',
            name='nft',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hunted_projects', to='governance.nft'),
        ),
        migrations.AddField(
            model_name='project',
            name='terms',
            field=models.ManyToManyField(blank=True, related_name='projects', through='project.ProjectTerm', to='project.Term'),
        ),
        migrations.AddField(
            model_name='project',
            name='tokens',
            field=models.ManyToManyField(blank=True, related_name='projects', to='project.Token'),
        ),
        migrations.AddField(
            model_name='project',
            name='wallet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hunted_projects', to='authentication.wallet'),
        ),
        migrations.CreateModel(
            name='IncentiveDistribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('earned', models.FloatField(default=0)),
                ('is_claimed', models.BooleanField(default=False)),
                ('incentive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incentive_distributions', to='project.incentive')),
                ('validate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incentive_distributions', to='project.validate')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('verified', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(default=0)),
                ('init_power_target', models.FloatField(default=1000.0)),
                ('score_detail', models.JSONField(blank=True, default=dict, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.CharField(blank=True, max_length=600, null=True)),
                ('event_name', models.CharField(default='launch', max_length=40)),
                ('event_date_start', models.DateTimeField(blank=True, null=True)),
                ('event_date_end', models.DateTimeField(blank=True, null=True)),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='media.media')),
                ('nft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='governance.nft')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_events', to='project.project')),
                ('targets', models.ManyToManyField(blank=True, related_name='target_events', to='project.Project')),
                ('wallet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='authentication.wallet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('db_status', models.IntegerField(choices=[(-1, 'Deleted'), (0, 'Pending'), (1, 'Active')], default=1)),
                ('verified', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(default=0)),
                ('init_power_target', models.FloatField(default=1000.0)),
                ('score_detail', models.JSONField(blank=True, default=dict, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, max_length=600, null=True)),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collections', to='media.media')),
                ('projects', models.ManyToManyField(blank=True, related_name='collections', to='project.Project')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='authentication.wallet')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
